React is a JavaScript library for building user interfaces.
React is used to build single-page applications.
React allows us to create reusable UI components.


import { createRoot } from 'react-dom/client';

function Hello() {
  return (
    <h1>Hello World!</h1>
  );
}

createRoot(document.getElementById('root')).render(
  <Hello />
);


What is React?
React is a front-end JavaScript library.
React was developed by the Facebook Software Engineer Jordan Walke.
React is also known as React.js or ReactJS.
React is a tool for building UI components.



How does React Work?
React creates a VIRTUAL DOM in memory.
Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM.
React only changes what needs to be changed!
React finds out what changes have been made, and changes only what needs to be changed.


The Container
React uses a container to render HTML in a web page.
Typically, this container is a <div id="root"></div> element in the index.html file.


The render Method
Did you notice the render method?
The render method defines what to render in the HTML container.
The result is displayed in the <div id="root"> element.

Example:
Display a paragraph inside the "root" element:

main.jsx
import { createRoot } from 'react-dom/client'

createRoot(document.getElementById('root')).render(
  <p>Welcome!</p>
) 


What is ES6?
ES6 stands for ECMAScript 6.

ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, it was published in 2015, and is also known as ECMAScript 2015.



Why Should I Learn ES6?
React uses ES6, and you should be familiar with some of the new features like:

Classes
Arrow Functions
Variables (let, const, var)
Array Methods like .map()
Destructuring
Modules
Ternary Operator
Spread Operator


What is JSX?
JSX stands for JavaScript XML.
JSX allows us to write HTML in React.
JSX makes it easier to write and add HTML in React.



Coding JSX
JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()  and/or appendChild() methods.
JSX converts HTML tags into react elements.



Expressions
You can insert any valid JavaScript expression inside JSX by wrapping it in curly braces { }.
React will evaluate the expression and render the result in the DOM.


Variables
Variables are also valid expressions. Insert variables in JSX by wrapping it in curly braces { }.


Function Calls
Function calls are valid expressions. Insert function calls in JSX by wrapping it in curly braces { }.


Object Properties
Access object properties within JSX:
Example:
Refer to an object property inside JSX:
function Car() {
  const myobj = {
    name: "Fiat",
    model: "500",
    color: "white"
  };
  return (
    <>
      <h1>My car is a {myobj.color} {myobj.name} {myobj.model}</h1>
    </>
  );
}


React JSX Attributes
JSX allows you to insert attributes into HTML elements, but there are a few important differences.

class = className
The class attribute is a much used attribute in HTML, but since JSX is rendered as JavaScript, and the class keyword is a reserved word in JavaScript, you are not allowed to use it in JSX.

JSX solved this by using className instead. When JSX is rendered, it translates className attributes into class attributes.



Expressions as Attributes
You can also use JavaScript expressions as attribute values. This is very useful for dynamic attributes.

Example
Use JavaScript expressions as attribute values:

function Car() {
  const x = "myclass";
  return (
    <h1 className={x}>Hello World</h1>
  );
}




camelCase Event Attributes
Event attributes in JSX are written in camelCase.

Example:
Use camelCase for event attributes:

function Car() {
  const myfunc = () => {
    alert('Hello World');
  };
  return (
    <button onClick={myfunc}>Click me</button>
  );
}



Boolean Attributes
If you pass no value for an attribute, JSX treats it as true. To pass false, you must specify it as an expression.

Example:
Boolean true in JSX, this will make the button disabled:

<button onClick={myfunc} disabled>Click me</button>




The style Attribute
The style attribute in JSX only accepts a JavaScript object with camelCased CSS property names, rather than a CSS string (as in HTML).

Example
Use the style attribute:

function Car() {
  const mystyles = {
    color: "red",
    fontSize: "20px",
    backgroundColor: "lightyellow",
  };

  return (
    <>
      <h1 style={mystyles}>My car</h1>
    </>
  );
}


Conditions - if statements
React supports if statements, but not inside JSX.

To be able to use conditional statements in JSX, you should put the if statements outside of the JSX, or you could use a ternary expression instead:

Option 1:
Write if statements outside of the JSX code:
ExampleGet your own React.js Server
Write "Banana" if x is less than 10, otherwise "Apple":

function Fruit() {
  const x = 5;
  let y = "Apple";
  if (x < 10) {
    y = "Banana";
  }

  return (
    <h1>{y}</h1>
  );
}


React Components
Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.

Components come in two types, Class components and Function components, in this tutorial we will concentrate on Function components.



Create Your First Component
When creating a React component, the component's name MUST start with an upper case letter.

React components returns HTML code.

ExampleGet your own React.js Server
Create a Function component called Car

function Car() {
  return (
    <h2>Hi, I am a Car!</h2>
  );
}



Rendering a Component
Now your React application has a component called Car, which returns an <h2> element.

To use this component in your application, refer to it like this: <Car />

Example:
Display the Car component in the "root" element:

createRoot(document.getElementById('root')).render(
  <Car />
)



Props
Arguments can be passed into a component as props, which stands for properties.

You send the arguments into the component as HTML attributes.

You will learn more about props in our React Props chapter.

Example:
Use an attribute to pass a color to the Car component, and use it in the render function:

function Car(props) {
  return (
    <h2>I am a {props.color} Car!</h2>
  );
}

createRoot(document.getElementById('root')).render(
  <Car color="red"/>
);




Components in Components
We can refer to components inside other components:

Example:
Use the Car component inside the Garage component:

function Car() {
  return (
    <h2>I am a Car!</h2>
  );
}

function Garage() {
  return (
    <>
      <h1>Who lives in my Garage?</h1>
      <Car />
    </>
  );
}

createRoot(document.getElementById('root')).render(
  <Garage />
);



Rendering a Component Twice
We can render a component multiple times:

Example
Use the Car component twice inside the Garage component:

function Car() {
  return (
    <h2>I am a Car!</h2>
  );
}

function Garage() {
  return (
    <>
      <h1>Who lives in my Garage?</h1>
      <Car />
      <Car />
    </>
  );
}

createRoot(document.getElementById('root')).render(
  <Garage />
);




Components in Files
React is all about re-using code, and it can be a good idea to split your components into separate files.

To do that, create a new file in the src folder with a .jsx file extension and put the code inside it:
Example:
This is the new file, we named it Vehicle.jsx:

Vehicle.jsx
function Car() {
  return (
    <h2>Hi, I am a Car!</h2>
  );
}

export default Car;